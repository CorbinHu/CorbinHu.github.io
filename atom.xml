<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HBC&#39;Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-14T10:30:14.489Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CorbinHu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>排序算法总结</title>
    <link href="http://yoursite.com/2019/11/13/Summary-of-Sorting-Algorithms/"/>
    <id>http://yoursite.com/2019/11/13/Summary-of-Sorting-Algorithms/</id>
    <published>2019-11-13T06:22:11.000Z</published>
    <updated>2019-11-14T10:30:14.489Z</updated>
    
    <content type="html"><![CDATA[<h3 id="排序算法说明"><a href="#排序算法说明" class="headerlink" title="排序算法说明"></a>排序算法说明</h3><h4 id="设计到的术语"><a href="#设计到的术语" class="headerlink" title="设计到的术语"></a>设计到的术语</h4><ul><li>稳定性：若两个数相等，排序后两个数的先后顺序没有改变，则稳定，否则不稳定。</li><li>内排序：所有排序操作都是在内存中完成。</li><li>外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行。</li></ul><a id="more"></a><h3 id="交换排序之冒泡排序"><a href="#交换排序之冒泡排序" class="headerlink" title="交换排序之冒泡排序"></a>交换排序之冒泡排序</h3><h4 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;比较相邻俩个数的大小，若大小顺序有误，则交换两数；每次遍历都会把最大（小）的数移动到尾（首）。</p><h4 id="演示动图"><a href="#演示动图" class="headerlink" title="演示动图"></a>演示动图</h4><p><img src="/2019/11/13/Summary-of-Sorting-Algorithms/bubbleSort.gif" alt="bubbleSort"></p><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% fold 点击显/隐内容 %&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] sums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">boolean</span> tag = <span class="keyword">true</span>; <span class="comment">// 优化算法，若有一趟排序种，没有任何数据进行交换，说明数列已经有序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sums.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (sums[j] &gt; sums[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = sums[j];</span><br><span class="line">sums[j] = sums[j + <span class="number">1</span>];</span><br><span class="line">sums[j + <span class="number">1</span>] = temp;</span><br><span class="line">tag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tag)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endfold %&#125;</span><br></pre></td></tr></table></figure><h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><ul><li>时间复杂度：最好的情况是原序列为有序，需要比较（<em>N-1</em>）次；最坏情况是原序列是反序，需要进行（<em>N-1</em>）趟排序，每趟排序需要比较（<em>N-i</em>）次，故时间复杂度为O(<script type="math/tex">N^2</script>)，平均时间复杂度为O(<script type="math/tex">N^2</script>)。</li><li>空间复杂度：O(<em>1</em>)。</li><li>稳定。</li></ul><h3 id="插入排序之快速排序"><a href="#插入排序之快速排序" class="headerlink" title="插入排序之快速排序"></a>插入排序之快速排序</h3><h4 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;分治法，通过一趟排序将数列分成两个独立的部分，选取一个基准值，将小于基准值的数移动到基准值左边，大于基准值的数移动到基准值的右边。整个排序过程可以递归进行，使得整个序列有序。</p><h4 id="演示动图-1"><a href="#演示动图-1" class="headerlink" title="演示动图"></a>演示动图</h4><p><img src="/2019/11/13/Summary-of-Sorting-Algorithms/quickSort.gif" alt="quickSort"></p><h4 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high) &#123;</span><br><span class="line"><span class="keyword">int</span> pivot = nums[low];</span><br><span class="line"><span class="keyword">int</span> i = low;</span><br><span class="line"><span class="keyword">int</span> j = high;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line"><span class="keyword">while</span> ((i &lt; j) &amp;&amp; (nums[j] &gt; pivot)) &#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ((i &lt; j) &amp;&amp; (nums[i] &lt; pivot)) &#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == j) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> ((nums[i] == nums[j]) &amp;&amp; (i &lt; j)) &#123;</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> temp = nums[i];</span><br><span class="line">nums[i] = nums[j];</span><br><span class="line">nums[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i - <span class="number">1</span> &gt; low) nums = quickSort(nums, low, i - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (j + <span class="number">1</span> &lt; high) nums = quickSort(nums, j + <span class="number">1</span>, high);</span><br><span class="line"><span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法分析-1"><a href="#算法分析-1" class="headerlink" title="算法分析"></a>算法分析</h4><ul><li>时间复杂度：一次划分算法从两头交替搜素，直到 <em>low</em> 和 <em>high</em> 重合，其时间复杂度为O(<em>N</em>)；整个算法的时间复杂度与划分的次数有关。最好的情况每次划分所选择的基准值几乎将当前序列等分，经过 <script type="math/tex">log_2N</script> 次划分，便可以得到长度为1的子序列，整个算法的时间复杂度为O( <em>N</em> <script type="math/tex">log_2N</script>)；最坏情况每次划分所选的基准值恰好为当前序列中的最大或最小值，使得每次划分得到的子序列中一个为空，一个为其长度为原序列的长度-1。长度为<em>N</em>的序列需要经过<em>N</em>趟划分，使得整个排序算法的时间复杂度为O(<script type="math/tex">N^2</script>)。平均时间复杂度为O(<em>N</em> <script type="math/tex">log_2N</script>)。</li><li>空间复杂度：需要一个栈空间来实现递归，最好情况，所需栈的最大深度为<script type="math/tex">log_2(N+1)</script>；最坏情况，所需栈的最大深度为 <em>N</em> 。故其空间复杂度为<script type="math/tex">log_2N</script>。</li><li>不稳定。</li></ul><h3 id="插入排序之直接插入排序"><a href="#插入排序之直接插入排序" class="headerlink" title="插入排序之直接插入排序"></a>插入排序之直接插入排序</h3><h4 id="算法思想-2"><a href="#算法思想-2" class="headerlink" title="算法思想"></a>算法思想</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;每一趟将一个待排序的记录，按其大小插入到已经排序号的一组记录的适当的位置上，直到所有的数据都插入为止。</p><h4 id="演示动图-2"><a href="#演示动图-2" class="headerlink" title="演示动图"></a>演示动图</h4><p><img src="/2019/11/13/Summary-of-Sorting-Algorithms/insertSort.gif" alt="insertSort"></p><h4 id="算法实现-2"><a href="#算法实现-2" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123; <span class="comment">// 第0位数左右有序的序列</span></span><br><span class="line"><span class="comment">// 0~i-1位为有序，若第i位小于i-1位，继续寻位并插入，否则认为0~i位也是有序的，忽略此次循环</span></span><br><span class="line"><span class="keyword">if</span> (nums[i] &lt; nums[i - <span class="number">1</span>]) &#123; </span><br><span class="line"><span class="keyword">int</span> curr = nums[i];</span><br><span class="line"><span class="keyword">int</span> prev = i - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 从第i-1位开始向前遍历并移位，直到找到比当前值小的位置。</span></span><br><span class="line"><span class="keyword">while</span> (prev &gt;= <span class="number">0</span> &amp;&amp; curr &lt; nums[prev]) &#123; </span><br><span class="line">nums[prev + <span class="number">1</span>] = nums[prev];</span><br><span class="line">prev--;</span><br><span class="line">&#125;</span><br><span class="line">nums[prev + <span class="number">1</span>] = curr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法分析-2"><a href="#算法分析-2" class="headerlink" title="算法分析"></a>算法分析</h4><ul><li>时间复杂度：共需要<em>N</em>-1趟排序，最好情况，原序列就有序，每趟排序只需要比较1次，数据不需要移动，时间复杂度为O( <em>N</em> )；最差情况，原序列为反序，第 <em>i</em> 趟排序需要比较（<em>i+1</em>）次，数据需要移动 <em>i</em> 次，整个算法比较的次数为<script type="math/tex">\frac{(N-1)*(2+N)}{2}</script>，移动的次数为<script type="math/tex">\frac{(N-1)*N}{2}</script>，所以时间复杂度为O(<script type="math/tex">N^2</script>)。算法平均时间复杂度为O(<script type="math/tex">N^2</script>)。</li><li>空间复杂度：O(<em>1</em>)。</li><li>稳定。</li></ul><h3 id="插入排序之希尔排序"><a href="#插入排序之希尔排序" class="headerlink" title="插入排序之希尔排序"></a>插入排序之希尔排序</h3><h4 id="算法思想-3"><a href="#算法思想-3" class="headerlink" title="算法思想"></a>算法思想</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;选取一个整数作为增量（一般为 <script type="math/tex">d_1=length/2</script>），所以距离为的增量 <script type="math/tex">d_1</script> 的数为一组，先在各个组内进行直接插入排序，再取第二个增量<script type="math/tex">d_2=d_1/2</script>重复上述分组与排序，直到所取的增量<script type="math/tex">d_t=1</script>，即所有记录放再桶一组中进行分组直接插入排序。</p><h4 id="过程演示"><a href="#过程演示" class="headerlink" title="过程演示"></a>过程演示</h4><p><img src="/2019/11/13/Summary-of-Sorting-Algorithms/shellSort.png" alt="ShellSort"></p><h4 id="算法实现-3"><a href="#算法实现-3" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> d = nums.length;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">d = d / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + d; j &lt; nums.length; j += d) &#123;</span><br><span class="line"><span class="keyword">int</span> curr = nums[j];</span><br><span class="line"><span class="keyword">int</span> prev = j - d;</span><br><span class="line"><span class="keyword">while</span> (prev &gt;= <span class="number">0</span> &amp;&amp; curr &lt; nums[prev]) &#123;</span><br><span class="line">nums[prev + d] = nums[prev];</span><br><span class="line">prev -= d;</span><br><span class="line">&#125;</span><br><span class="line">nums[prev + d] = curr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (d != <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法分析-3"><a href="#算法分析-3" class="headerlink" title="算法分析"></a>算法分析</h4><ul><li>时间复杂度：O(<script type="math/tex">N^\frac{4}{3}</script>)</li><li>空间复杂度：O(1)</li><li>不稳定</li><li>与直接插入排序算法先比较，减少了移动次数，速度要跟快。 原因：当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小，插入排序对于有序的序列效率很高。 </li><li>中等大小规模表现良好，对规模非常大的数据排序不是最优选择。</li></ul><h3 id="选择排序之简单选择排序"><a href="#选择排序之简单选择排序" class="headerlink" title="选择排序之简单选择排序"></a>选择排序之简单选择排序</h3><h4 id="算法思想-4"><a href="#算法思想-4" class="headerlink" title="算法思想"></a>算法思想</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;首先从未排序的序列中找到最小的元素放在已排序的序列的起始位置，再在剩下的未排序元素中找到最小的元素放在已排序序列的尾部，以此类推，直到序列完全有序。</p><h4 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h4><p><img src="/2019/11/13/Summary-of-Sorting-Algorithms/sectionSort.gif" alt="sectionSort"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sectionSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> minIndex = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[j]&lt;nums[minIndex])&#123;</span><br><span class="line">minIndex = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (minIndex != i)&#123;</span><br><span class="line"><span class="keyword">int</span> temp = nums[i];</span><br><span class="line">nums[i] = nums[minIndex];</span><br><span class="line">nums[minIndex] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="算法分析-4"><a href="#算法分析-4" class="headerlink" title="算法分析"></a>算法分析</h4><ul><li>时间复杂度：最好情况为O(<em>N</em>)，最坏情况为O(<script type="math/tex">n^2</script>)，平均时间复杂度为O(<script type="math/tex">n^2</script>)</li><li>空间复杂度：O(1)</li><li>稳定</li></ul><h3 id="选择排序之堆排序"><a href="#选择排序之堆排序" class="headerlink" title="选择排序之堆排序"></a>选择排序之堆排序</h3><h4 id="算法思想-5"><a href="#算法思想-5" class="headerlink" title="算法思想"></a>算法思想</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;堆排序首先将序列生成大顶堆（小顶堆），此时序列中最大的元素就在堆顶（完全二叉树的根节点），将堆顶元素与最后一个节点值交换，再将交换后的完全二叉树调整成堆，重复上述操作，直至序列完全有序。<br>堆的定义：<br>&nbsp;&nbsp;&nbsp;&nbsp;1）完全二叉树：除了最后一层之外的其他每一层都被完全填充，并且是从左往右填充。<br>&nbsp;&nbsp;&nbsp;&nbsp;2）大顶堆：父节点的值 &gt; = 子节点的值；小顶堆：父节点的值 &lt; = 子节点的值<br>由于完全二叉树节点连续，中间无断裂，故可以一维数组表示完全二叉树。第 <em>i</em> 个节点的父节点的索引为<script type="math/tex">parent = (i-1)/2</script>，左子节点的索引为<script type="math/tex">leftChild=2*i+1</script>，右子节点索引为<script type="math/tex">rightChild=2*i+1</script>。</p><h4 id="动图演示-1"><a href="#动图演示-1" class="headerlink" title="动图演示"></a>动图演示</h4><p><img src="/2019/11/13/Summary-of-Sorting-Algorithms/heapSort.gif" alt="HeapSort"></p><h4 id="算法实现-4"><a href="#算法实现-4" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] heapSort(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line"><span class="comment">// 将序列构建成堆</span></span><br><span class="line"><span class="keyword">int</span> lastNode = nums.length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> lastParent = (lastNode - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 从最后一个父节点开始计算</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = lastParent; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">adjustHeap(nums, nums.length, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上述堆已经构建完成，开始排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="comment">// 元素交换,去掉大顶堆</span></span><br><span class="line"><span class="comment">// 把大顶堆的根元素，放到数组的最后；</span></span><br><span class="line">swap(nums, <span class="number">0</span>, i);</span><br><span class="line"><span class="comment">// 接下来我们需要排序的，就是已经去掉了部分元素的堆了</span></span><br><span class="line">adjustHeap(nums, i, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆排序最关键的地方，调整二叉树，使其满足堆的要求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums   待组堆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length 堆的长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i      堆的起始节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> length, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> leftChild = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> rightChild = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> max = i;</span><br><span class="line"><span class="keyword">if</span> ((leftChild &lt; length) &amp;&amp; nums[leftChild] &gt; nums[max]) &#123;</span><br><span class="line">max = leftChild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((rightChild &lt; length) &amp;&amp; nums[rightChild] &gt; nums[max]) &#123;</span><br><span class="line">max = rightChild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (max != i) &#123;</span><br><span class="line">swap(nums, i, max);</span><br><span class="line"><span class="comment">// 递归调整发生交换后的堆</span></span><br><span class="line">adjustHeap1(nums, length, max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = nums[i];</span><br><span class="line">nums[i] = nums[j];</span><br><span class="line">nums[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法分析-5"><a href="#算法分析-5" class="headerlink" title="算法分析"></a>算法分析</h4><ul><li>时间复杂度：在构建堆的过程中，是从完全二叉树最下层的非叶子节点开始构建的，将它和其孩子节点进行比较和有必要的交换，对于每个非叶子节点，最多2次比较和交换，故初始化堆的时间复杂度为O(<em>N</em>)。在正式排序时，第<em>i</em> 次取堆顶元素和重建堆需要的时间复杂度为O(<script type="math/tex">log_2i</script>)，(完全二叉树的某个节点到根节点的距离为<script type="math/tex">log_2i -1</script>)，需要取<script type="math/tex">N-1</script>次栈顶元素，故重建堆的时间复杂度为O(<script type="math/tex">Nlog_2N</script>)。 由于堆排序对元素记录的排序状态不敏感，因此它无论最好，最坏，和平均时间复杂度均为O(<script type="math/tex">Nlog_2N</script>)。 </li><li>空间复杂度：O(1)。</li><li>不稳地</li></ul><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h4 id="算法思想-6"><a href="#算法思想-6" class="headerlink" title="算法思想"></a>算法思想</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;采用分治法，利用递归与分治技术将数据序列划分成为越来越小的子序列，之后对子序列排序，最后再用递归方法将排好序的子序列合并成为有序序列。<br>    1)  把长度为n的输入序列分成两个长度为n/2的子序列；<br>    2)  对着两个子序列使用归并排序（递归调用）；<br>    3）将排序好的两个子序列合并得到最终的有序序列。</p><h4 id="动图演示-2"><a href="#动图演示-2" class="headerlink" title="动图演示"></a>动图演示</h4><p><img src="/2019/11/13/Summary-of-Sorting-Algorithms/mergeSort.gif" alt="mergeSort"></p><h4 id="算法实现-5"><a href="#算法实现-5" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums.length &lt; <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> nums;</span><br><span class="line"><span class="keyword">int</span> mid = nums.length / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span>[] left = Arrays.copyOfRange(nums, <span class="number">0</span>, mid);</span><br><span class="line"><span class="keyword">int</span>[] right = Arrays.copyOfRange(nums, mid, nums.length);</span><br><span class="line"><span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将两个有序子序列合并成一个有序序列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] merge(<span class="keyword">int</span>[] left, <span class="keyword">int</span>[] right) &#123;</span><br><span class="line"><span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[left.length + right.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> leftIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rightIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (leftIndex &gt;= left.length)</span><br><span class="line">result[i] = right[rightIndex++];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (rightIndex &gt;= right.length)</span><br><span class="line">result[i] = left[leftIndex++];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (left[leftIndex] &lt;= right[rightIndex])</span><br><span class="line">result[i] = left[leftIndex++];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">result[i] = right[rightIndex++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法分析-6"><a href="#算法分析-6" class="headerlink" title="算法分析"></a>算法分析</h4><ul><li>时间复杂度：最好的情况O(<em>N</em>)，最差的情况O(<script type="math/tex">Nlog_2N</script>)，平均时间复杂度O(<script type="math/tex">Nlog_2N</script>)。</li><li>空间复杂度：O(<script type="math/tex">N</script>)</li><li>稳定N</li></ul><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><h4 id="算法思想-7"><a href="#算法思想-7" class="headerlink" title="算法思想"></a>算法思想</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;非比较排序，将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p><h4 id="演示动图-3"><a href="#演示动图-3" class="headerlink" title="演示动图"></a>演示动图</h4><p><img src="/2019/11/13/Summary-of-Sorting-Algorithms/radixSort.gif" alt="radixSort"></p><h4 id="算法实现-6"><a href="#算法实现-6" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] radixSort(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> nums;</span><br><span class="line"><span class="comment">// 计算最大数的位数</span></span><br><span class="line"><span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">max = Math.max(nums[i], max);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (max != <span class="number">0</span>) &#123;</span><br><span class="line">max /= <span class="number">10</span>;</span><br><span class="line">maxCount++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建10个桶</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; bucketList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">bucketList.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为了得到对应位的数值，mod去除高位，div去除低位</span></span><br><span class="line"><span class="keyword">int</span> mod = <span class="number">10</span>, div = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxCount; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line"><span class="keyword">int</span> value = (num % mod) / div;</span><br><span class="line">bucketList.get(value).add(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每按照某一位排序都需要将数组索引还原为0</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (List&lt;Integer&gt; aBucketList : bucketList) &#123;</span><br><span class="line"><span class="keyword">for</span> (Integer num : aBucketList) &#123;</span><br><span class="line">nums[index++] = num;</span><br><span class="line">&#125;</span><br><span class="line">aBucketList.clear();</span><br><span class="line">&#125;</span><br><span class="line">mod *= <span class="number">10</span>;</span><br><span class="line">div *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法分析-7"><a href="#算法分析-7" class="headerlink" title="算法分析"></a>算法分析</h4><ul><li>时间复杂度：O(<script type="math/tex">N*k</script>)</li><li>空间复杂度：O(<script type="math/tex">N+k</script>)</li><li>稳定<h3 id="算法总结"><a href="#算法总结" class="headerlink" title="算法总结"></a>算法总结</h3>几种常用排序算法的算法性能如下图所示。<br><img src="/2019/11/13/Summary-of-Sorting-Algorithms/AlgoSummary.png" alt="AlgoSummary"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;排序算法说明&quot;&gt;&lt;a href=&quot;#排序算法说明&quot; class=&quot;headerlink&quot; title=&quot;排序算法说明&quot;&gt;&lt;/a&gt;排序算法说明&lt;/h3&gt;&lt;h4 id=&quot;设计到的术语&quot;&gt;&lt;a href=&quot;#设计到的术语&quot; class=&quot;headerlink&quot; title=&quot;设计到的术语&quot;&gt;&lt;/a&gt;设计到的术语&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;稳定性：若两个数相等，排序后两个数的先后顺序没有改变，则稳定，否则不稳定。&lt;/li&gt;
&lt;li&gt;内排序：所有排序操作都是在内存中完成。&lt;/li&gt;
&lt;li&gt;外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="algorithms" scheme="http://yoursite.com/categories/algorithms/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu18.04 server安装桌面并进行远程访问</title>
    <link href="http://yoursite.com/2019/06/03/server%E5%AE%89%E8%A3%85%E6%A1%8C%E9%9D%A2%E5%B9%B6%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
    <id>http://yoursite.com/2019/06/03/server安装桌面并进行远程访问/</id>
    <published>2019-06-03T02:26:23.000Z</published>
    <updated>2019-11-13T11:17:44.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-安装Xrdp"><a href="#1-安装Xrdp" class="headerlink" title="1. 安装Xrdp"></a>1. 安装Xrdp</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;xrdp使用RDP（Microsoft远程桌面协议）为远程计算机提供图形登录。xrdp接受来自各种RDP客户端的连接：FreeRDP，rdesktop，NeutrinoRDP和Microsoft远程桌面客户端（适用于Windows，macOS，iOS和Android）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install xrdp</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-安装vnc4server"><a href="#2-安装vnc4server" class="headerlink" title="2.安装vnc4server"></a>2.安装vnc4server</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;VNC (Virtual Network Console)是虚拟网络控制台的缩写，VNC开启的服务端口5910（默认）。XRDP启动之后。系统会自己主动启动一个VNC会话进程监听服务。VNC由客户端的应用程序(vncviewer)和服务器端的应用程序(vncserver)组成。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vnc4server</span><br></pre></td></tr></table></figure></p><h3 id="3-安装xubuntu-desktop"><a href="#3-安装xubuntu-desktop" class="headerlink" title="3.安装xubuntu-desktop"></a>3.安装xubuntu-desktop</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install xubuntu-desktop</span><br></pre></td></tr></table></figure><h3 id="4-向xsession中写入xfce4-session"><a href="#4-向xsession中写入xfce4-session" class="headerlink" title="4.向xsession中写入xfce4-session"></a>4.向xsession中写入xfce4-session</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "xfce4-session" &gt;~/.xsession</span><br></pre></td></tr></table></figure><h3 id="5-安装dconf-editor并修改设置"><a href="#5-安装dconf-editor并修改设置" class="headerlink" title="5.安装dconf-editor并修改设置"></a>5.安装dconf-editor并修改设置</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Liunx通过dconf-editor来配置geditor，dconf-editor相当于一个简单的注册表，跟注册表的树状结构类似。详细dconf请用man dconf查看。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install dconf-editor</span><br><span class="line">sudo dconf-editor</span><br></pre></td></tr></table></figure></p><p>依次展开：<code>org-&gt;gnome-&gt;desktop-&gt;remote-access 关掉require-encryption</code><br>如下图所示<img src="/2019/06/03/server安装桌面并进行远程访问/p1.png" alt="dconf-editor"></p><h3 id="6-重启xrdp"><a href="#6-重启xrdp" class="headerlink" title="6.重启xrdp"></a>6.重启xrdp</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service xrdp restart</span><br></pre></td></tr></table></figure><h3 id="7-通过MobaXterm远程连接server桌面"><a href="#7-通过MobaXterm远程连接server桌面" class="headerlink" title="7.通过MobaXterm远程连接server桌面"></a>7.通过MobaXterm远程连接server桌面</h3><p>如下图所示：<br><img src="/2019/06/03/server安装桌面并进行远程访问/p2.png" alt="dconf-editor"></p><p><img src="/2019/06/03/server安装桌面并进行远程访问/p3.png" alt="dconf-editor"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-安装Xrdp&quot;&gt;&lt;a href=&quot;#1-安装Xrdp&quot; class=&quot;headerlink&quot; title=&quot;1. 安装Xrdp&quot;&gt;&lt;/a&gt;1. 安装Xrdp&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xrdp使用RDP（Microsoft远程桌面协议）为远程计算机提供图形登录。xrdp接受来自各种RDP客户端的连接：FreeRDP，rdesktop，NeutrinoRDP和Microsoft远程桌面客户端（适用于Windows，macOS，iOS和Android）。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install xrdp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="liunx" scheme="http://yoursite.com/categories/liunx/"/>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>从零搭建恶意软件检测系统Cuckoo2.0.6</title>
    <link href="http://yoursite.com/2019/05/26/system/"/>
    <id>http://yoursite.com/2019/05/26/system/</id>
    <published>2019-05-26T08:32:42.000Z</published>
    <updated>2019-11-13T06:49:00.385Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Cuckoo Sandbox是一个开源的恶意文件自动化分析系统，采用python和c/c++开发，跨越windows、android、linux和darwin四种操作系统平台，支持二进制的PE文件（exe、dll、com）、PDF文档、office文档、URLs、HTML文件、各种脚本（PHP、VB、Python）、jar包、zip文件等等几乎所有的文件格式。能分析恶意文件的静态二进制数据和动态运行后的进程、网络、文件等行为。对于恶意文件的初步分析定性具有很大帮助。<br><a id="more"></a><br><strong>配置情况：</strong><br>Host：<br>Ubuntu 18.04 LTS + VirtualBox + Cuckoo 2.0.6 + 8GB RAM<br>Guest:<br>Windows 7 Professional + 2GB RAM</p><h3 id="主机环境准备"><a href="#主机环境准备" class="headerlink" title="主机环境准备"></a>主机环境准备</h3><h4 id="安装需要的依赖"><a href="#安装需要的依赖" class="headerlink" title="安装需要的依赖"></a>安装需要的依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-get install python python-pip python-dev libffi-dev libssl-dev   </span><br><span class="line"><span class="meta">$</span> sudo apt-get install -y python-setuptools   </span><br><span class="line"><span class="meta">$</span> sudo apt-get install -y libjpeg-dev zlib1g-dev swig   </span><br><span class="line"><span class="meta">#</span> 安裝pillow所需library   </span><br><span class="line"><span class="meta">$</span> sudo apt-get install -y libtiff5-dev libjpeg8-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python-tk</span><br></pre></td></tr></table></figure><p><strong>安装依赖完成后一点要记得检查软件更新，并更新。</strong><br><code>$ sudo apt-get update</code><br><code>$ sudo apt-get upgrade</code><br><strong>PS：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;update的作用：从/etc/apt/source.list文件中定义的源中去同步包的索引文件，即运行这个命令其实并没有更新软件，而是相当于windows下面的检查更新，获取的是软件的状态。<br>&nbsp;&nbsp;&nbsp;&nbsp;upgrade的作用：<br>根据update命令同步好了的包的索引文件，去真正地更新软件。<br>&nbsp;&nbsp;&nbsp;&nbsp;dist-upgrade的作用：<br>从/etc/apt/source.list文件中获得地址，然后从这些地址中检索需要更新的包。相当于update+upgrade</p><h4 id="安装相关软件"><a href="#安装相关软件" class="headerlink" title="安装相关软件"></a>安装相关软件</h4><h5 id="Tcpdump"><a href="#Tcpdump" class="headerlink" title="Tcpdump"></a>Tcpdump</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;TCPDump可以将网络中传送的数据包完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-get install -y apparmor-utils</span><br><span class="line"><span class="meta">#</span> 若使用预设的CWD目录(~/.cuckoo)，則要禁用AppArmor对tcpdump的安全配置，否則AppArmor会阻止PCAP文件的创建</span><br><span class="line"><span class="meta">$</span> sudo aa-disable /usr/sbin/tcpdump</span><br><span class="line"><span class="meta">$</span> sudo apt-get install tcpdump</span><br><span class="line"><span class="meta">#</span> tcpdump执行需要root权限，若不想让Cuckoo使用root权限执行，那么可以使用下列指令设定</span><br><span class="line"><span class="meta">$</span> sudo setcap cap_net_raw,cap_net_admin=eip /usr/sbin/tcpdump</span><br><span class="line"><span class="meta">#</span> 验证是否安装成功</span><br><span class="line"><span class="meta">$</span> getcap /usr/sbin/tcpdump</span><br><span class="line">/usr/sbin/tcpdump = cap_net_admin,cap_net_raw+eip</span><br><span class="line"><span class="meta">#</span> 若沒有setcap指令，可以使用下列指令安裝</span><br><span class="line"><span class="meta">$</span> sudo apt-get install libcap2-bin</span><br></pre></td></tr></table></figure></p><h5 id="Pydeep（可选）"><a href="#Pydeep（可选）" class="headerlink" title="Pydeep（可选）"></a>Pydeep（可选）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> wget http://sourceforge.net/projects/ssdeep/files/ssdeep-2.13/ssdeep-2.13.tar.gz/download -O ssdeep-2.13.tar.gz</span><br><span class="line"><span class="meta">$</span> tar -zxf ssdeep-2.13.tar.gz</span><br><span class="line"><span class="meta">$</span> cd ssdeep-2.13</span><br><span class="line"><span class="meta">$</span> ./configure</span><br><span class="line"><span class="meta">$</span> make</span><br><span class="line"><span class="meta">$</span> sudo make install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>确认安装无误</span><br><span class="line"><span class="meta">$</span> ssdeep -V</span><br><span class="line"><span class="meta">$</span> sudo pip install pydeep</span><br><span class="line"><span class="meta">$</span> pip show pydeep</span><br><span class="line">---</span><br><span class="line">Name: pydeep</span><br><span class="line">Version: 0.2</span><br><span class="line">Location: /usr/local/lib/python2.7/dist-packages</span><br><span class="line">Requires:</span><br></pre></td></tr></table></figure><h5 id="Volatility"><a href="#Volatility" class="headerlink" title="Volatility"></a>Volatility</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;Volatility是一种可选工具，可对内存转储进行取证分析。与Cuckoo结合使用，它可以自动提供对操作系统深度修改的额外可视性，并检测逃脱Cuckoo分析器监控域的rootkit技术的存在。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>先安装依赖</span><br><span class="line"><span class="meta">$</span> sudo pip install openpyxl</span><br><span class="line"><span class="meta">$</span> sudo pip install ujson</span><br><span class="line"><span class="meta">$</span> sudo pip install pycrypto</span><br><span class="line"><span class="meta">$</span> sudo pip install distorm3</span><br><span class="line"><span class="meta">$</span> sudo pip install pytz </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>然后安装volatility</span><br><span class="line"><span class="meta">$</span> git clone https://github.com/volatilityfoundation/volatility.git</span><br><span class="line"><span class="meta">$</span> cd volatility</span><br><span class="line"><span class="meta">$</span> python setup.py build</span><br><span class="line"><span class="meta">$</span> python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>确认安装无误</span><br><span class="line"><span class="meta">$</span> python vol.py -h</span><br></pre></td></tr></table></figure></p><h5 id="M2Crypto"><a href="#M2Crypto" class="headerlink" title="M2Crypto"></a>M2Crypto</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 目前M2Crypto只有在安装SWIG时才支持该库</span><br><span class="line"><span class="meta">#</span> sudo pip install m2crypto==0.24.0不适用Ubuntu18.04 ,可能SWIG版本升高了。</span><br><span class="line"><span class="meta">$</span> sudo apt-get install python-m2crypto # 安装后版本为0.27.0</span><br></pre></td></tr></table></figure><h5 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;MongoDB用于存储样本分析结果。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-get install mongodb</span><br></pre></td></tr></table></figure></p><h5 id="Cuckoo"><a href="#Cuckoo" class="headerlink" title="Cuckoo"></a>Cuckoo</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pip install cuckoo</span><br></pre></td></tr></table></figure><p><strong>PS:</strong><br>（1）这些软件的安装顺序随意，但必须安相应软件前安装其相应的依赖。<br>（2）安装完cuckoo需要运行<code>cukoo -d</code>，确保cuckoo安装成功，并生成相应的文件。否则主机重启后需要重新安装cuckoo。</p><h3 id="客户机准备"><a href="#客户机准备" class="headerlink" title="客户机准备"></a>客户机准备</h3><h4 id="安装-VirtualBox"><a href="#安装-VirtualBox" class="headerlink" title="安装 VirtualBox"></a>安装 VirtualBox</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;在安装VirtualBox的过程中很可能会出现要求你Disable Secure Boot的要求，我建议你最好进BIOS把安全启动模式关掉，否则之后虚拟机的使用很可能无法创建Host-only网卡。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo pip install virtualbox</span><br></pre></td></tr></table></figure></p><h4 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;装好Win7 系统之后，默认网络为网络地址转换（NAT），打开虚拟机，可以访问外网，但不能与主机通讯。</p><ul><li>关闭系统更新，防火墙，UAC。</li><li><p>安装Python及pillow库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装pillow库</span><br><span class="line"><span class="meta">&gt;</span>cd C:\Python27\Scripts</span><br><span class="line"><span class="meta">&gt;</span>pip install Pillow</span><br></pre></td></tr></table></figure></li><li><p>安装一些办公软件，模拟真实办公环境。如：office，浏览器，PDF阅读器，QQ等。</p></li><li>安装增强功能，开启共享文件夹或拖拽（双向），剪切板共享（双向）。</li><li>将Cuckoo的agent.py设定为开机自启动。<br>a）该文件原始位置在cuckoo的CWD子目录下，默认路径为：<code>~/.cuckoo/agent/agent.py</code><br>将agent.py文件拷贝到虚拟机系统开机启动目录。Win7中默认路径为：<code>C:\Users[username]\AppData\Roaming\MicroSoft\Windows\Start Menu\Programs\Startup\。</code><br>如果想要agent运行时没有GUI窗口，可以将后缀名改为pyw。<br>b）配置系统开机自启动。<ul><li>使用Administrator权限cmd，并依序在cmd中输入以下指令：</li><li>[USERNAME]和[PASSWORD]需替换为登入的Windows <code>username</code>和<code>password</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reg add "hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon" /v DefaultUserName /d [USERNAME] /t REG_SZ /f</span><br><span class="line">reg add "hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon" /v DefaultPassword /d [PASSWORD] /t REG_SZ /f</span><br><span class="line">reg add "hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon" /v AutoAdminLogon /d 1 /t REG_SZ /f</span><br><span class="line">reg add "hklm\system\CurrentControlSet\Control\TerminalServer" /v AllowRemoteRPC /d 0x01 /t REG_DWORD /f</span><br><span class="line">reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v LocalAccountTokenFilterPolicy /d 0x01 /t REG_DWORD /f</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>PS：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;a）CWD为cuckoo的默认工作空间，代表的路径为：<code>/home/xxx/.cuckoo</code><br>&nbsp;&nbsp;&nbsp;&nbsp;b）AppData为隐藏目录，需要打开隐藏目录的windows选项。</p><h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;虚拟机默认安装的网络为网络地址转换（NAT），要想虚拟机与主机进行通讯，则需要再配置一块Host-Only网卡。</p><ul><li>在VirtualBox的全局设定的网络设置中配置一个Host-Only网卡，默认为vboxnet0，</li><li>关闭虚拟机，配置虚拟机的网络，网络2设置为Host-Only，在虚拟机内手动设置IP，网关，子网掩码，DNS。<blockquote><p>IP: 192.168.56.101<br>Subnet mask:255.255.255.0<br>Default gateway: 192.168.56.1<br>Prefered DNS server: 114.114.114.114<br>Alternate DNS server: 8.8.8.8</p></blockquote></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;此时虚拟机既能访问外网，又能与主机进行通信。<br><strong>PS：</strong><br>a）网络地址转换(NAT)：</p><ul><li>虚拟机可以访问主机能访问到的所有网络，但是对于主机以及主机网络上的其他机器，虚拟机又是不可见的，即主机以及主机网络上的其他机器无法访问虚拟机。</li><li>虚拟机访问网络的所有数据都是由主机提供的，虚拟机并不真实存在于网络中，主机与网络中的任何机器都不能查看和访问到虚拟机的存在。<br>b）Host-Only Adapter：虚拟机与主机默认不能相互访问，双方不属于同一IP段，host-only网卡默认IP段为192.168.56.X ，子网掩码为255.255.255.0，后面的虚拟机被分配到的也都是这个网段。通过网卡共享、网卡桥接等，可以实现虚拟机于主机相互访问。但虚拟机无法访问其他网络。<br>c）虚拟机中的几种网络设置详细说明请看下篇文章。</li></ul><h4 id="生成快照"><a href="#生成快照" class="headerlink" title="生成快照"></a>生成快照</h4><p>此时虚拟机配置完成，生成快照，进行系统备份，沙箱每次启动都是启动的快照。</p><h3 id="Cuckoo-配置文件"><a href="#Cuckoo-配置文件" class="headerlink" title="Cuckoo 配置文件"></a>Cuckoo 配置文件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Cuckoo配置文件的更改是非常重要的一步，否则很可能你的所有安装都无法正常启动。在<code>~/.cuckoo/conf/</code>文件夹下修改配置文件，</p><h4 id="cuckoo-conf"><a href="#cuckoo-conf" class="headerlink" title="cuckoo.conf"></a>cuckoo.conf</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;该文件包含了在启动Cuckoo之前验证通用配置选项。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd ~/.cuckoo/conf</span><br><span class="line"><span class="meta">$</span> vim cuckoo.conf</span><br><span class="line"><span class="meta">#</span> 需要注意以下设置</span><br><span class="line"><span class="meta">#</span> Specify the name of the machinery module to use, this module will</span><br><span class="line"><span class="meta">#</span> define the interaction between Cuckoo and your virtualization software</span><br><span class="line"><span class="meta">#</span> of choice.</span><br><span class="line">machinery = virtualbox</span><br><span class="line"><span class="meta">#</span> Enable creation of memory dump of the analysis machine before shutting</span><br><span class="line"><span class="meta">#</span> down. Even if turned off, this functionality can also be enabled at</span><br><span class="line"><span class="meta">#</span> submission. Currently available for: VirtualBox and libvirt modules (KVM).</span><br><span class="line">memory_dump = yes # 开启了转存分析，需要设置为yes</span><br><span class="line"></span><br><span class="line">[resultserver]</span><br><span class="line"><span class="meta">#</span> The Result Server is used to receive in real time the behavioral logs</span><br><span class="line"><span class="meta">#</span> produced by the analyzer.</span><br><span class="line"><span class="meta">#</span> Specify the IP address of the host. The analysis machines should be able</span><br><span class="line"><span class="meta">#</span> to contact the host through such address, so make sure it's valid.</span><br><span class="line"><span class="meta">#</span> NOTE: if you set resultserver IP to 0.0.0.0 you have to set the option</span><br><span class="line"><span class="meta">#</span> `resultserver_ip` for all your virtual machines in machinery configuration.</span><br><span class="line">ip = 192.168.56.1</span><br><span class="line"><span class="meta">#</span> Specify a port number to bind the result server on.</span><br><span class="line">port = 2042</span><br></pre></td></tr></table></figure></p><h4 id="auxiliary-conf"><a href="#auxiliary-conf" class="headerlink" title="auxiliary.conf"></a>auxiliary.conf</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;该文件是与恶意软件分析同时运行的脚本，此文件定义了它们的选项。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vim auxiliary.conf </span><br><span class="line">[sniffer]</span><br><span class="line"><span class="meta">#</span> Enable or disable the use of an external sniffer (tcpdump) [yes/no].</span><br><span class="line">enabled = yes # 默认为no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Specify the path to your local installation of tcpdump. Make sure this</span><br><span class="line"><span class="meta">#</span> path is correct.</span><br><span class="line">tcpdump = /usr/sbin/tcpdump</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> We used to define the network interface to capture on in auxiliary.conf, but</span><br><span class="line"><span class="meta">#</span> this has been moved to the "interface" field of each Virtual Machinery</span><br><span class="line"><span class="meta">#</span> configuration.</span><br><span class="line"><span class="meta">#</span> 这里需要注意：之前在auxiliary.conf中定义要捕获的网络接口，现在在每个虚拟机的配置文件中配置的“接口”字段</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Specify a Berkeley packet filter to pass to tcpdump.</span><br><span class="line"><span class="meta">#</span> Note: packer filtering is not possible when using "nictrace" functionality</span><br><span class="line"><span class="meta">#</span> from VirtualBox (for example dumping inter-VM traffic).</span><br><span class="line">bpf = </span><br><span class="line"></span><br><span class="line">[mitm]</span><br><span class="line"><span class="meta">#</span> Enable man in the middle proxying (mitmdump) [yes/no].</span><br><span class="line">enabled = no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Specify the path to your local installation of mitmdump. Make sure this</span><br><span class="line"><span class="meta">#</span> path is correct.</span><br><span class="line">mitmdump = /usr/local/bin/mitmdump</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Listen port base. Each virtual machine will use its own port to be</span><br><span class="line"><span class="meta">#</span> able to make a good distinction between the various running analyses.</span><br><span class="line"><span class="meta">#</span> Generally port 50000 should be fine, in this case port 50001, 50002, etc</span><br><span class="line"><span class="meta">#</span> will also be used - again, one port per analyses.</span><br><span class="line">port_base = 50000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Script file to interact with the network traffic. Please refer to the</span><br><span class="line"><span class="meta">#</span> documentation of mitmproxy/mitmdump to get an understand of their internal</span><br><span class="line"><span class="meta">#</span> workings. (https://mitmproxy.org/doc/scripting/inlinescripts.html)</span><br><span class="line">script = stuff/mitm.py</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Path to the certificate to be used by mitmdump. This file will be</span><br><span class="line"><span class="meta">#</span> automatically generated for you if you run mitmdump once. It's just that</span><br><span class="line"><span class="meta">#</span> you have to copy it from ~/.mitmproxy/mitmproxy-ca-cert.p12 to somewhere</span><br><span class="line"><span class="meta">#</span> in the analyzer/windows/ directory. Recommended is to write the certificate</span><br><span class="line"><span class="meta">#</span> to analyzer/windows/bin/cert.p12, in that case the following option should</span><br><span class="line"><span class="meta">#</span> be set to bin/cert.p12.</span><br><span class="line">certificate = bin/cert.p12</span><br><span class="line"></span><br><span class="line">[services]</span><br><span class="line"><span class="meta">#</span> Provide extra services accessible through the network of the analysis VM</span><br><span class="line"><span class="meta">#</span> provided in separate, standalone, Virtual Machines [yes/no].</span><br><span class="line">enabled = no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Comma-separated list with each Virtual Machine containing said service(s).</span><br><span class="line">services = honeyd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Time in seconds required to boot these virtual machines. E.g., some services</span><br><span class="line"><span class="meta">#</span> will only get online after a minute because initialization takes a while.</span><br><span class="line">timeout = 0</span><br><span class="line"></span><br><span class="line">[reboot]</span><br><span class="line"><span class="meta">#</span> This auxiliary module should be enabled for reboot analysis support.</span><br><span class="line">enabled = yes</span><br></pre></td></tr></table></figure></p><h4 id="virtualbox-conf"><a href="#virtualbox-conf" class="headerlink" title="virtualbox.conf"></a>virtualbox.conf</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;该模块是定义Cuckoo应如何与您选择的虚拟化软件交互的脚本。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo vim virtualbox.conf</span><br><span class="line">[virtualbox]</span><br><span class="line"><span class="meta">#</span> Specify which VirtualBox mode you want to run your machines on.</span><br><span class="line"><span class="meta">#</span> Can be "gui" or "headless". Please refer to VirtualBox's official</span><br><span class="line"><span class="meta">#</span> documentation to understand the differences.</span><br><span class="line">mode = headless # 无界面，若为gui，则有界面，调试时候用。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Path to the local installation of the VBoxManage utility.</span><br><span class="line">path = /usr/bin/VBoxManage</span><br><span class="line"><span class="meta">#</span> If you are running Cuckoo on Mac OS X you have to change the path as follows:</span><br><span class="line"><span class="meta">#</span> path = /Applications/VirtualBox.app/Contents/MacOS/VBoxManage</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Default network interface.</span><br><span class="line">interface = vboxnet0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Specify a comma-separated list of available machines to be used. For each</span><br><span class="line"><span class="meta">#</span> specified ID you have to define a dedicated section containing the details</span><br><span class="line"><span class="meta">#</span> on the respective machine. (E.g. cuckoo1,cuckoo2,cuckoo3)</span><br><span class="line">machines = win7 # 虚拟机名称</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> If remote control is enabled in cuckoo.conf, specify a port range to use.</span><br><span class="line"><span class="meta">#</span> Virtualbox will bind the VRDP interface to the first available port.</span><br><span class="line">controlports = 5000-5050</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[win7] # 对应machines字段</span><br><span class="line"><span class="meta">#</span> Specify the label name of the current machine as specified in your</span><br><span class="line"><span class="meta">#</span> VirtualBox configuration.</span><br><span class="line">label = win7 # 对应machines字段</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Specify the operating system platform used by current machine</span><br><span class="line"><span class="meta">#</span> [windows/darwin/linux].</span><br><span class="line">platform = windows</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Specify the IP address of the current virtual machine. Make sure that the</span><br><span class="line"><span class="meta">#</span> IP address is valid and that the host machine is able to reach it. If not,</span><br><span class="line"><span class="meta">#</span> the analysis will fail.</span><br><span class="line">ip = 192.168.56.101 # 虚拟机设置的静态IP地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> (Optional) Specify the snapshot name to use. If you do not specify a snapshot</span><br><span class="line"><span class="meta">#</span> name, the VirtualBox MachineManager will use the current snapshot.</span><br><span class="line"><span class="meta">#</span> Example (Snapshot1 is the snapshot name):</span><br><span class="line">snapshot = cuckoo # 虚拟机生成快照的名称</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> (Optional) Specify the name of the network interface that should be used</span><br><span class="line"><span class="meta">#</span> when dumping network traffic from this machine with tcpdump. If specified,</span><br><span class="line"><span class="meta">#</span> overrides the default interface specified in auxiliary.conf</span><br><span class="line"><span class="meta">#</span> Example (vboxnet0 is the interface name):</span><br><span class="line">interface = vboxnet0 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> (Optional) Specify the IP of the Result Server, as your virtual machine sees it.</span><br><span class="line"><span class="meta">#</span> The Result Server will always bind to the address and port specified in cuckoo.conf,</span><br><span class="line"><span class="meta">#</span> however you could set up your virtual network to use NAT/PAT, so you can specify here</span><br><span class="line"><span class="meta">#</span> the IP address for the Result Server as your machine sees it. If you don't specify an</span><br><span class="line"><span class="meta">#</span> address here, the machine will use the default value from cuckoo.conf.</span><br><span class="line"><span class="meta">#</span> NOTE: if you set this option you have to set result server IP to 0.0.0.0 in cuckoo.conf.</span><br><span class="line"><span class="meta">#</span> Example:</span><br><span class="line">resultserver_ip = </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> (Optional) Specify the port for the Result Server, as your virtual machine sees it.</span><br><span class="line"><span class="meta">#</span> The Result Server will always bind to the address and port specified in cuckoo.conf,</span><br><span class="line"><span class="meta">#</span> however you could set up your virtual network to use NAT/PAT, so you can specify here</span><br><span class="line"><span class="meta">#</span> the port for the Result Server as your machine sees it. If you don't specify a port</span><br><span class="line"><span class="meta">#</span> here, the machine will use the default value from cuckoo.conf.</span><br><span class="line"><span class="meta">#</span> Example:</span><br><span class="line">resultserver_port = </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> (Optional) Set your own tags. These are comma separated and help to identify</span><br><span class="line"><span class="meta">#</span> specific VMs. You can run samples on VMs with tag you require.</span><br><span class="line">tags = </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Mostly unused for now. Please don't fill it out.</span><br><span class="line">options = </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> (Optional) Specify the OS profile to be used by volatility for this</span><br><span class="line"><span class="meta">#</span> virtual machine. This will override the guest_profile variable in</span><br><span class="line"><span class="meta">#</span> memory.conf which solves the problem of having multiple types of VMs</span><br><span class="line"><span class="meta">#</span> and properly determining which profile to use.</span><br><span class="line">osprofile = # 使用volatility分析转存，这里需要些虚拟机的版本号，如Win7SP0x86</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[honeyd]</span><br><span class="line"><span class="meta">#</span> For more information on this VM please refer to the "services" section of</span><br><span class="line"><span class="meta">#</span> the conf/auxiliary.conf configuration file. This machine is a bit special</span><br><span class="line"><span class="meta">#</span> in the way that its used as an additional VM for an analysis.</span><br><span class="line"><span class="meta">#</span> *NOTE* that if this functionality is used, the VM should be registered in</span><br><span class="line"><span class="meta">#</span> the "machines" list in the beginning of this file.</span><br><span class="line">label = honeyd</span><br><span class="line">platform = linux</span><br><span class="line">ip = 192.168.56.102</span><br><span class="line"><span class="meta">#</span> The tags should at least contain "service" and the name of this service.</span><br><span class="line"><span class="meta">#</span> This way the services auxiliary module knows how to find this particular VM.</span><br><span class="line">tags = service, honeyd</span><br><span class="line"><span class="meta">#</span> Not all services actually have a Cuckoo Agent running in the VM, for those</span><br><span class="line"><span class="meta">#</span> services one can specify the "noagent" option so Cuckoo will just wait until</span><br><span class="line"><span class="meta">#</span> the end of the analysis instead of trying to connect to the non-existing</span><br><span class="line"><span class="meta">#</span> Cuckoo Agent. We can't really intercept any inter-VM communication from the</span><br><span class="line"><span class="meta">#</span> host / gateway so in order to dump traffic between VMs we have to use a</span><br><span class="line"><span class="meta">#</span> different network dumping approach. For this machine we use the "nictrace"</span><br><span class="line"><span class="meta">#</span> functionality from VirtualBox (which is basically their internal tcpdump)</span><br><span class="line"><span class="meta">#</span> and thus properly dumps inter-VM traffic.</span><br><span class="line">options = nictrace noagent</span><br></pre></td></tr></table></figure></p><h4 id="reporting-conf"><a href="#reporting-conf" class="headerlink" title="reporting.conf"></a>reporting.conf</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;该文件包含有关报告生成的信息。本文只修改了mongodb部分<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[mongodb]</span><br><span class="line">enabled = yes # 默认为no</span><br><span class="line">host = 127.0.0.1</span><br><span class="line">port = 27017</span><br><span class="line">db = cuckoo</span><br><span class="line">store_memdump = yes</span><br><span class="line">paginate = 100</span><br><span class="line"><span class="meta">#</span> MongoDB authentication (optional).</span><br><span class="line">username = </span><br><span class="line">password =</span><br></pre></td></tr></table></figure></p><h4 id="memory-conf"><a href="#memory-conf" class="headerlink" title="memory.conf"></a>memory.conf</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;该文件为Volatility 配置文件，本次未做修改。</p><h4 id="processing-conf"><a href="#processing-conf" class="headerlink" title="processing.conf"></a>processing.conf</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;该文件允许启用，禁用和配置所有处理模块。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 开启内存转储</span><br><span class="line">[memory]</span><br><span class="line"><span class="meta">#</span> Create a memory dump of the entire Virtual Machine. This memory dump will</span><br><span class="line"><span class="meta">#</span> then be analyzed using Volatility to locate interesting events that can be</span><br><span class="line"><span class="meta">#</span> extracted from memory.</span><br><span class="line">enabled = yes</span><br></pre></td></tr></table></figure></p><h3 id="启动Cuckoo"><a href="#启动Cuckoo" class="headerlink" title="启动Cuckoo"></a>启动Cuckoo</h3><p>运行以下命令下载Cuckoo提供的社区版行为签名库<code>$ cuckoo community</code>若这样运行比较慢或有错误，则<a href="https://github.com/cuckoosandbox/community/archive/master.tar.gz" target="_blank" rel="noopener">下载</a>签名到本地再运行命令<code>$ cuckoo community --file &quot;/root/community-master.tar.gz&quot;</code>  file 后的参数为文件所存放的路径。<br>启动cuckoo<code>$ cuckoo –d</code>，<br>启动cuckoo web 服务 <code>$ cuckoo web</code>，通过 <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> 进行访问<br>分析结果的储存路径为：<code>CWD/storage/analyses</code></p><h3 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h3><p>（1）虚拟机在设置Host-Only网络，通过iptable做地址转换NAT规则，开启IP转发后，虚拟机可以访问网络，但Ubuntu 18.04无法访问外网。其原因为：主机未设置网络共享，本人不知道如何添加网络共享的iptables规则，故更换此方法，用上网卡设置虚拟机网络，如上网络配置所述。<br>（2）一切配置完后，启动cuckoo 报如下错误：<br><code>ERROR: Type of config parameter auxiliary:sniffer:interface not found!</code><br>解决方法：修改virtualbox.conf文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> (Optional) Specify the name of the network interface that should be used</span><br><span class="line"><span class="meta">#</span> when dumping network traffic from this machine with tcpdump. If specified,</span><br><span class="line"><span class="meta">#</span> overrides the default interface specified in auxiliary.conf</span><br><span class="line"><span class="meta">#</span> Example (vboxnet0 is the interface name):</span><br><span class="line">interface = vboxnet0 # 增添值为vboxnet0</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>（1）在搭cuckoo沙箱时，一定要注意看官方的说明文档，而不是一味的按照别人的blog来做，毕竟版本在变化。<br>（2）遇到问题应想办法解决问题，不能认为按照别人blog的方法做报错，是自己环境配置问题，老是用重装系统来解决。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>（1）<a href="https://cuckoo.sh/docs/installation/host/requirements.html" target="_blank" rel="noopener">官方文档</a><br>（2）<a href="https://0x90e.github.io/cuckoo-installation/" target="_blank" rel="noopener">Cuckoo Installation</a><br>（3）<a href="https://www.jianshu.com/p/f623fa0bebf9" target="_blank" rel="noopener">Cuckoo SandBox V2.0.4安装指南</a><br>（4）<a href="https://www.jianshu.com/p/ac009f6c2710" target="_blank" rel="noopener">Cuckoo v2.0.6搭建过程</a><br>（5）<a href="https://github.com/cuckoosandbox/cuckoo/issues" target="_blank" rel="noopener">github上关于cuckoo的issus</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Cuckoo Sandbox是一个开源的恶意文件自动化分析系统，采用python和c/c++开发，跨越windows、android、linux和darwin四种操作系统平台，支持二进制的PE文件（exe、dll、com）、PDF文档、office文档、URLs、HTML文件、各种脚本（PHP、VB、Python）、jar包、zip文件等等几乎所有的文件格式。能分析恶意文件的静态二进制数据和动态运行后的进程、网络、文件等行为。对于恶意文件的初步分析定性具有很大帮助。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Security" scheme="http://yoursite.com/categories/Security/"/>
    
    
      <category term="System Security" scheme="http://yoursite.com/tags/System-Security/"/>
    
  </entry>
  
  <entry>
    <title>利用hexo+github搭建博客</title>
    <link href="http://yoursite.com/2017/05/26/%E5%88%A9%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/05/26/利用hexo+github搭建博客/</id>
    <published>2017-05-26T04:12:57.000Z</published>
    <updated>2019-11-13T11:17:32.886Z</updated>
    
    <content type="html"><![CDATA[<p>参考以下几个帖子：<br><a href="https://www.jianshu.com/p/15ae47eddc56" target="_blank" rel="noopener">小白独立搭建博客—Github Pages和Hexo简明教程</a><br><a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">Hexo-NexT配置超炫网页效果</a><br><a href="http://www.cnblogs.com/jarson-7426/p/5660424.html" target="_blank" rel="noopener">hexo博客－性能优化</a><br><a href="https://yq.aliyun.com/articles/8608" target="_blank" rel="noopener">Hexo折腾记——性能优化篇</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考以下几个帖子：&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/15ae47eddc56&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小白独立搭建博客—Github Pages和Hexo简明教程&lt;/a&gt;&lt;br&gt;&lt;a hre
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
</feed>
